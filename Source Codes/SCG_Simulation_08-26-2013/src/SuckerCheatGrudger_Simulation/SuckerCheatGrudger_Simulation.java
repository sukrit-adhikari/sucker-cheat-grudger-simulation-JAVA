package SuckerCheatGrudger_Simulation;

import BiologicalProcessModules.Copulation;
import BiologicalProcessModules.SuddenNaturalDeath;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import mathematicalFunctions.Probability;

public class SuckerCheatGrudger_Simulation extends javax.swing.JFrame{

    SimulationParameters sP = new SimulationParameters();
    SimulationStatistics sS = new SimulationStatistics();
    ArrayList<Individual> individuals = new ArrayList<Individual>();

    public SuckerCheatGrudger_Simulation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        lbl_Headline = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl_PopulationParametersHeadline = new javax.swing.JLabel();
        lbl_SuckersPopulation = new javax.swing.JLabel();
        txt_SuckersPopulation = new javax.swing.JTextField();
        lbl_CheatsPopulation = new javax.swing.JLabel();
        txt_CheatsPopulation = new javax.swing.JTextField();
        lbl_GrudgersPopulation = new javax.swing.JLabel();
        txt_GrudgersPopulation = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmb_S_SC = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmb_G_SG = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        cmb_C_CG = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        txt_MaximumReproduction = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txt_StartHealth = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmb_DeathFromNaturalCauseProbability = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cmb_CopulationProbability = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmb_InfectionProbability = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmb_MaleProbability = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txt_CONSTANTForHealthEquation = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btn_startSimulation = new javax.swing.JButton();
        lbl_parametersExceptionMessage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        simulationStatisticsTable = new javax.swing.JTable();
        jProgressBar_SimulationStatus = new javax.swing.JProgressBar();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl_Headline.setText("Sucker Cheat Grudger Simulation :: The Selfish Gene - Richard Dawkins :: Programming - Sukrit Adhikari, sukrit09@gmail.com");

        lbl_PopulationParametersHeadline.setText("Population Parameters for Simulation");

        lbl_SuckersPopulation.setText("Suckers ::");

        txt_SuckersPopulation.setText("100");

        lbl_CheatsPopulation.setText("Cheats ::");

        txt_CheatsPopulation.setText("100");

        lbl_GrudgersPopulation.setText("Grudgers ::");

        txt_GrudgersPopulation.setText("100");

        jLabel6.setText("Dominant Gene Probability Parameters for Simulation");

        jLabel7.setText("S/SC ::");

        cmb_S_SC.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "1%", "2%", "3%", "4%", "5%", "6%", "7%", "8%", "9%", "10%", "11%", "12%", "13%", "14%", "15%", "16%", "17%", "18%", "19%", "20%", "21%", "22%", "23%", "24%", "25%", "26%", "27%", "28%", "29%", "30%", "31%", "32%", "33%", "34%", "35%", "36%", "37%", "38%", "39%", "40%", "41%", "42%", "43%", "44%", "45%", "46%", "47%", "48%", "49%", "50%", "51%", "52%", "53%", "54%", "55%", "56%", "57%", "58%", "59%", "60%", "61%", "62%", "63%", "64%", "65%", "66%", "67%", "68%", "69%", "70%", "71%", "72%", "73%", "74%", "75%", "76%", "77%", "78%", "79%", "80%", "81%", "82%", "83%", "84%", "85%", "86%", "87%", "88%", "89%", "90%", "91%", "92%", "93%", "94%", "95%", "96%", "97%", "98%", "99%", "100%" }));
        cmb_S_SC.setSelectedIndex(50);

        jLabel9.setText("G/SG ::");

        cmb_G_SG.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "1%", "2%", "3%", "4%", "5%", "6%", "7%", "8%", "9%", "10%", "11%", "12%", "13%", "14%", "15%", "16%", "17%", "18%", "19%", "20%", "21%", "22%", "23%", "24%", "25%", "26%", "27%", "28%", "29%", "30%", "31%", "32%", "33%", "34%", "35%", "36%", "37%", "38%", "39%", "40%", "41%", "42%", "43%", "44%", "45%", "46%", "47%", "48%", "49%", "50%", "51%", "52%", "53%", "54%", "55%", "56%", "57%", "58%", "59%", "60%", "61%", "62%", "63%", "64%", "65%", "66%", "67%", "68%", "69%", "70%", "71%", "72%", "73%", "74%", "75%", "76%", "77%", "78%", "79%", "80%", "81%", "82%", "83%", "84%", "85%", "86%", "87%", "88%", "89%", "90%", "91%", "92%", "93%", "94%", "95%", "96%", "97%", "98%", "99%", "100%" }));
        cmb_G_SG.setSelectedIndex(50);

        jLabel11.setText("C/CG ::");

        cmb_C_CG.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "1%", "2%", "3%", "4%", "5%", "6%", "7%", "8%", "9%", "10%", "11%", "12%", "13%", "14%", "15%", "16%", "17%", "18%", "19%", "20%", "21%", "22%", "23%", "24%", "25%", "26%", "27%", "28%", "29%", "30%", "31%", "32%", "33%", "34%", "35%", "36%", "37%", "38%", "39%", "40%", "41%", "42%", "43%", "44%", "45%", "46%", "47%", "48%", "49%", "50%", "51%", "52%", "53%", "54%", "55%", "56%", "57%", "58%", "59%", "60%", "61%", "62%", "63%", "64%", "65%", "66%", "67%", "68%", "69%", "70%", "71%", "72%", "73%", "74%", "75%", "76%", "77%", "78%", "79%", "80%", "81%", "82%", "83%", "84%", "85%", "86%", "87%", "88%", "89%", "90%", "91%", "92%", "93%", "94%", "95%", "96%", "97%", "98%", "99%", "100%" }));
        cmb_C_CG.setSelectedIndex(50);

        jLabel13.setText("Maximum Reproduction Capability of Female ::");

        txt_MaximumReproduction.setText("15");

        jLabel14.setText("Starting Health of all Individuals ::");

        txt_StartHealth.setText("100");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_S_SC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_MaximumReproduction))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_StartHealth, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_C_CG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_G_SG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmb_S_SC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cmb_C_CG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cmb_G_SG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_MaximumReproduction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txt_StartHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setText("Probability Parameters for Simulation");

        jLabel2.setText("Death from Natural Cause ::");

        cmb_DeathFromNaturalCauseProbability.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "1%", "2%", "3%", "4%", "5%", "6%", "7%", "8%", "9%", "10%", "11%", "12%", "13%", "14%", "15%", "16%", "17%", "18%", "19%", "20%", "21%", "22%", "23%", "24%", "25%", "26%", "27%", "28%", "29%", "30%", "31%", "32%", "33%", "34%", "35%", "36%", "37%", "38%", "39%", "40%", "41%", "42%", "43%", "44%", "45%", "46%", "47%", "48%", "49%", "50%", "51%", "52%", "53%", "54%", "55%", "56%", "57%", "58%", "59%", "60%", "61%", "62%", "63%", "64%", "65%", "66%", "67%", "68%", "69%", "70%", "71%", "72%", "73%", "74%", "75%", "76%", "77%", "78%", "79%", "80%", "81%", "82%", "83%", "84%", "85%", "86%", "87%", "88%", "89%", "90%", "91%", "92%", "93%", "94%", "95%", "96%", "97%", "98%", "99%", "100%" }));
        cmb_DeathFromNaturalCauseProbability.setSelectedIndex(15);

        jLabel3.setText("Copulation Probability ::");

        cmb_CopulationProbability.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "1%", "2%", "3%", "4%", "5%", "6%", "7%", "8%", "9%", "10%", "11%", "12%", "13%", "14%", "15%", "16%", "17%", "18%", "19%", "20%", "21%", "22%", "23%", "24%", "25%", "26%", "27%", "28%", "29%", "30%", "31%", "32%", "33%", "34%", "35%", "36%", "37%", "38%", "39%", "40%", "41%", "42%", "43%", "44%", "45%", "46%", "47%", "48%", "49%", "50%", "51%", "52%", "53%", "54%", "55%", "56%", "57%", "58%", "59%", "60%", "61%", "62%", "63%", "64%", "65%", "66%", "67%", "68%", "69%", "70%", "71%", "72%", "73%", "74%", "75%", "76%", "77%", "78%", "79%", "80%", "81%", "82%", "83%", "84%", "85%", "86%", "87%", "88%", "89%", "90%", "91%", "92%", "93%", "94%", "95%", "96%", "97%", "98%", "99%", "100%" }));
        cmb_CopulationProbability.setSelectedIndex(15);

        jLabel4.setText("Infection Probability ::");

        cmb_InfectionProbability.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "1%", "2%", "3%", "4%", "5%", "6%", "7%", "8%", "9%", "10%", "11%", "12%", "13%", "14%", "15%", "16%", "17%", "18%", "19%", "20%", "21%", "22%", "23%", "24%", "25%", "26%", "27%", "28%", "29%", "30%", "31%", "32%", "33%", "34%", "35%", "36%", "37%", "38%", "39%", "40%", "41%", "42%", "43%", "44%", "45%", "46%", "47%", "48%", "49%", "50%", "51%", "52%", "53%", "54%", "55%", "56%", "57%", "58%", "59%", "60%", "61%", "62%", "63%", "64%", "65%", "66%", "67%", "68%", "69%", "70%", "71%", "72%", "73%", "74%", "75%", "76%", "77%", "78%", "79%", "80%", "81%", "82%", "83%", "84%", "85%", "86%", "87%", "88%", "89%", "90%", "91%", "92%", "93%", "94%", "95%", "96%", "97%", "98%", "99%", "100%" }));
        cmb_InfectionProbability.setSelectedIndex(15);

        jLabel5.setText("Male Probability ::");

        cmb_MaleProbability.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "1%", "2%", "3%", "4%", "5%", "6%", "7%", "8%", "9%", "10%", "11%", "12%", "13%", "14%", "15%", "16%", "17%", "18%", "19%", "20%", "21%", "22%", "23%", "24%", "25%", "26%", "27%", "28%", "29%", "30%", "31%", "32%", "33%", "34%", "35%", "36%", "37%", "38%", "39%", "40%", "41%", "42%", "43%", "44%", "45%", "46%", "47%", "48%", "49%", "50%", "51%", "52%", "53%", "54%", "55%", "56%", "57%", "58%", "59%", "60%", "61%", "62%", "63%", "64%", "65%", "66%", "67%", "68%", "69%", "70%", "71%", "72%", "73%", "74%", "75%", "76%", "77%", "78%", "79%", "80%", "81%", "82%", "83%", "84%", "85%", "86%", "87%", "88%", "89%", "90%", "91%", "92%", "93%", "94%", "95%", "96%", "97%", "98%", "99%", "100%" }));
        cmb_MaleProbability.setSelectedIndex(50);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmb_MaleProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmb_InfectionProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmb_CopulationProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmb_DeathFromNaturalCauseProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmb_DeathFromNaturalCauseProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmb_CopulationProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmb_InfectionProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmb_MaleProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_PopulationParametersHeadline)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(lbl_GrudgersPopulation)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_GrudgersPopulation, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbl_SuckersPopulation)
                                .addComponent(lbl_CheatsPopulation))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txt_SuckersPopulation, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                .addComponent(txt_CheatsPopulation)))))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_PopulationParametersHeadline)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_SuckersPopulation)
                    .addComponent(txt_SuckersPopulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_CheatsPopulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_CheatsPopulation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_GrudgersPopulation)
                    .addComponent(txt_GrudgersPopulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jLabel15.setText("Health Equation");

        jLabel16.setText("<html>\nHealth = 100 * e<sup><b>(-time_of_Infection*CONSTANT)</b></sup>\n</html>");

        jLabel17.setText("CONSTANT ::");

        txt_CONSTANTForHealthEquation.setText("0.46");

        jLabel8.setText("*Higher the value of CONSTANT");

        jLabel10.setText("faster an infected individual dies.");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_CONSTANTForHealthEquation, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel10)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txt_CONSTANTForHealthEquation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        btn_startSimulation.setText("Start Simulation");
        btn_startSimulation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btn_startSimulationMouseReleased(evt);
            }
        });

        simulationStatisticsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Population", "Births", "D_Natural", "D_Ageing", "D_Infection", "Suckers", "Cheats", "Grudgers", "Infected", "SS_Genes", "CC_Genes", "GG_Genes", "SC_Genes", "SG_Genes", "CG_Genes", "Males", "Females"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(simulationStatisticsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btn_startSimulation)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_parametersExceptionMessage)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar_SimulationStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lbl_Headline, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Headline)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_startSimulation)
                    .addComponent(lbl_parametersExceptionMessage))
                .addGap(18, 18, 18)
                .addComponent(jProgressBar_SimulationStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_startSimulationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_startSimulationMouseReleased
        // TODO add your handling code here:
        lbl_parametersExceptionMessage.setText(""); // Make the Exception/ Invalid Paramters Exception Message label null . (Useful for 2nd running after valid data is entered)
        fillSimulationParameters();
    }//GEN-LAST:event_btn_startSimulationMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SuckerCheatGrudger_Simulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SuckerCheatGrudger_Simulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SuckerCheatGrudger_Simulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SuckerCheatGrudger_Simulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SuckerCheatGrudger_Simulation().setVisible(true);
            }
        });



    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_startSimulation;
    private javax.swing.JComboBox cmb_C_CG;
    private javax.swing.JComboBox cmb_CopulationProbability;
    private javax.swing.JComboBox cmb_DeathFromNaturalCauseProbability;
    private javax.swing.JComboBox cmb_G_SG;
    private javax.swing.JComboBox cmb_InfectionProbability;
    private javax.swing.JComboBox cmb_MaleProbability;
    private javax.swing.JComboBox cmb_S_SC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar_SimulationStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbl_CheatsPopulation;
    private javax.swing.JLabel lbl_GrudgersPopulation;
    private javax.swing.JLabel lbl_Headline;
    private javax.swing.JLabel lbl_PopulationParametersHeadline;
    private javax.swing.JLabel lbl_SuckersPopulation;
    private javax.swing.JLabel lbl_parametersExceptionMessage;
    private javax.swing.JTable simulationStatisticsTable;
    private javax.swing.JTextField txt_CONSTANTForHealthEquation;
    private javax.swing.JTextField txt_CheatsPopulation;
    private javax.swing.JTextField txt_GrudgersPopulation;
    private javax.swing.JTextField txt_MaximumReproduction;
    private javax.swing.JTextField txt_StartHealth;
    private javax.swing.JTextField txt_SuckersPopulation;
    // End of variables declaration//GEN-END:variables

       private void fillSimulationParameters(){

        btn_startSimulation.setEnabled(false);
        try {
            sP.setNoOfSuckers(Integer.parseInt((txt_SuckersPopulation.getText())));
            SimulationStatistics.noOfSuckers=Integer.parseInt((txt_SuckersPopulation.getText()));
            
            sP.setNoOfCheats(Integer.parseInt((txt_CheatsPopulation.getText())));
            SimulationStatistics.noOfCheats = Integer.parseInt((txt_CheatsPopulation.getText()));
            
            sP.setNoOfGrudgers(Integer.parseInt((txt_GrudgersPopulation.getText())));
            SimulationStatistics.noOfGrudgers = Integer.parseInt((txt_GrudgersPopulation.getText()));
            
            
            sP.setDeathFromNaturalCauseProbability(((cmb_DeathFromNaturalCauseProbability.getSelectedIndex()) ));
            sP.setCopulationProbability((cmb_CopulationProbability.getSelectedIndex()));
            sP.setInfectionProbability((cmb_InfectionProbability.getSelectedIndex()));
            sP.setMaleFemaleProbability((cmb_MaleProbability.getSelectedIndex()));

            sP.setS_SCProbability((cmb_S_SC.getSelectedIndex()));
            sP.setC_CGProbability((cmb_C_CG.getSelectedIndex()));
            sP.setG_SGProbability((cmb_G_SG.getSelectedIndex()));

            sP.setMaximumReproductionCapabilityOfFemale(Integer.parseInt((txt_MaximumReproduction.getText())));
            sP.setStartingHealth(Integer.parseInt(txt_StartHealth.getText()));
            sP.setHealthConstant(Float.parseFloat(txt_CONSTANTForHealthEquation.getText())); // ERROR UNRESOLVED RETURNS 0 y??????
            createIndividuals(sP);

        } catch (Exception e) {
            lbl_parametersExceptionMessage.setText("Invalid Parameter(s) Encountered. Simulation can not proceed forward until you enter valid data.");
            btn_startSimulation.setEnabled(true);
        }

        // All variables NEEDED for SIMULATION is BY NOW Stored in sP Object of SimulationParametes class. Now we have to create Individuals.
    }
    
        private void createIndividuals(SimulationParameters sP) {
           
            SimulationStatistics.resetSimulationStatistics();
            
            
            Integer s = sP.getNoOfSuckers();
            Integer c = sP.getNoOfCheats();
            Integer g = sP.getNoOfGrudgers();
            SimulationStatistics.noOfSuckers = s;
            SimulationStatistics.noOfCheats = c;
            SimulationStatistics.noOfGrudgers = g;
            Integer i;
            Float maleFemaleProbability = new Float(sP.getMaleFemaleProbability());
            String maleOrFemale;
            Probability p = new Probability(maleFemaleProbability);
            Random randomNo = new Random();
            String individualID;
           
            for(i=1;i<=s;i++){ // Create suckers with pure SS genes
                if (p.returnBooleanWithProbability() == true) {  // Selecting male or female with 50%/50% probability
                    maleOrFemale = "m";
                    SimulationStatistics.noOfMales++;
                } else {
                    maleOrFemale = "f";
                    SimulationStatistics.noOfFemales++;
                }
                individualID = String.valueOf(System.currentTimeMillis()) + String.valueOf(randomNo.nextInt(10000)) + "s";

                Individual newIndividual = new Individual(individualID, 0, maleOrFemale, "s", false, sP.getStartingHealth(), "ss", "s", 0);
                SimulationStatistics.noOf_SS_Genes++;
                SimulationStatistics.noOf_S_DominantGenes++;
                individuals.add(newIndividual);
            }
            for(i=1;i<=c;i++){ // Create cheats with pure CC genes
                if (p.returnBooleanWithProbability() == true) {  // Selecting male or female with 50%/50% probability
                    maleOrFemale = "m";
                    SimulationStatistics.noOfMales++;
                } else {
                    maleOrFemale = "f";
                    SimulationStatistics.noOfFemales++;
                }
                individualID = String.valueOf(System.currentTimeMillis()) + String.valueOf(randomNo.nextInt(10000))+"c";

                Individual newIndividual = new Individual(individualID, 0, maleOrFemale, "c", false, sP.getStartingHealth(), "cc", "c", 0);
                SimulationStatistics.noOf_CC_Genes++;
                SimulationStatistics.noOf_C_DominantGenes++;
                individuals.add(newIndividual);
            }
            for(i=1;i<=g;i++){ // Create grudgers with pure GG genes
                if (p.returnBooleanWithProbability() == true) {  // Selecting male or female with 50%/50% probability
                    maleOrFemale = "m";
                    SimulationStatistics.noOfMales++;
                } else {
                    maleOrFemale = "f";
                    SimulationStatistics.noOfFemales++;
                }
                individualID = String.valueOf(System.currentTimeMillis()) + String.valueOf(randomNo.nextInt(10000))+"g";

                Individual newIndividual = new Individual(individualID, 0, maleOrFemale, "g", false, sP.getStartingHealth(), "gg", "g", 0);
                SimulationStatistics.noOf_GG_Genes++;
                SimulationStatistics.noOf_G_DominantGenes++;
                individuals.add(newIndividual);
                
            }
            // All Individuals have now been created. Now pass these individuals to SuddenNaturalDeath and SEE WHO gets killed and who survives
            
            
            clearTable();
            
            updateTable(0); // 0 Indicates '#' or Time
            for(Integer test=1;test<=100;test++){
                if(SimulationStatistics.noOfMales >0 && SimulationStatistics.noOfFemales>0){
                   
                        SimulationStatistics.noOfBirths=0;
                        SimulationStatistics.noOfDeaths_Natural=0;
                        SimulationStatistics.noOfDeaths_Infection=0;
                        SimulationStatistics.noOfDeaths_Ageing=0;
                        
                        java.util.Collections.shuffle(individuals);
                        copulate(test);
                        java.util.Collections.shuffle(individuals);
                        killAnIndividualNaturalDeath();
                        updateTable(test);
                        
                        jProgressBar_SimulationStatus.setValue(test);
                    
                }else{
                    break;
                }
            }
            btn_startSimulation.setEnabled(true); // Start Simulation Button enabled
     }
        
        private void fillSimulationStatistics(SimulationParameters sP){
            
        }
        
        private void killAnIndividualNaturalDeath(){
            if(individuals.size()==0 || individuals.isEmpty()){
                return;
            }
            
            SuddenNaturalDeath sN = new SuddenNaturalDeath();
            individuals = sN.SuddenNaturalDeath(sP, individuals);
        }
        
        private void copulate(Integer time){
            if(individuals.size()==0 || individuals.isEmpty()){
                return;
            }
            
            ArrayList<Integer> whoGotChanceToCopulate = new ArrayList<Integer>();
            Integer i;
            Individual male = null;                 // GARBAGE Initialiation as it be be SURELY changed
            Integer maleIndexInIndividuals=-1;      // GARBAGE Initialiation as it be be SURELY changed
            Individual female = null;               // GARBAGE Initialiation as it be be SURELY changed
            Integer femaleIndexInIndividuals=-1;    // GARBAGE Initialiation as it be be SURELY changed
            boolean gotMale= false;
            boolean gotFemale=false;
            Integer initialPopulationSize = individuals.size();
            Probability copulationProbability = new Probability(sP.getCopulationProbability());
            
            while(whoGotChanceToCopulate.size()!=initialPopulationSize){ // RUN LOOP Until every one gets chance to Copulate with RANDOM EACH OTHER 
                System.out.println(whoGotChanceToCopulate.size());
                for(i=0;i<=(initialPopulationSize-1);i++){ // FIND male and female WHO have not Copulated 
                        if(!whoGotChanceToCopulate.contains(i)){ 
                            if(individuals.get(i).getMaleOrFemale()=="m" && gotMale == false){
                                whoGotChanceToCopulate.add(i);
                                maleIndexInIndividuals = i ;
                                male = individuals.get(i);
                                gotMale = true;
                            }
                            if(individuals.get(i).getMaleOrFemale()=="f" && gotFemale == false && individuals.get(i).getTotalBirthsGiven()<sP.getMaximumReproductionCapabilityOfFemale()){
                                whoGotChanceToCopulate.add(i);
                                femaleIndexInIndividuals = i;
                                female = individuals.get(i);
                                gotFemale = true;
                            }
                         }
                        
                         if(gotFemale && gotMale){
                           break;
                         }
                }// At this point all the population has been checked to find male and female "ADULTS" . Newborns are added at the end of individuals list. So they are not considered for copulation.
                if(!gotFemale || !gotMale){ // No female OR No male Found in the entire ADULT population
                    return;// Abort COPULATION Process....
                }
            
            if(copulationProbability.returnBooleanWithProbability()){
                    gotFemale = false; // For NEXT LOOP
                    gotMale   = false; // For NEXT LOOP
                    
                    Individual newBornIndividual = Copulation.copulateTwoIndividual(male,female,sP,time);
                    //System.out.println("\n***********************************************************************\n");
                    //System.out.println("Following Individual is BORN ...!!!");
                   // Utilities.displayIndividualParameters(newBornIndividual);
                   // System.out.println("\n***********************************************************************\n");
                    individuals.add(newBornIndividual);
                    individuals.get(maleIndexInIndividuals).setTotalBirthsGiven(individuals.get(maleIndexInIndividuals).getTotalBirthsGiven()+1);
                    individuals.get(femaleIndexInIndividuals).setTotalBirthsGiven(individuals.get(femaleIndexInIndividuals).getTotalBirthsGiven()+1);
            }    
                
            }
        }
        
        
        private void clearTable(){
            DefaultTableModel model = (DefaultTableModel) simulationStatisticsTable.getModel();
            model.setRowCount(0);
        }
        private void updateTable(Integer time){
            
            DefaultTableModel model = (DefaultTableModel)simulationStatisticsTable.getModel();
            model.addRow(new Object[]{time,(SimulationStatistics.noOfMales+SimulationStatistics.noOfFemales),SimulationStatistics.noOfBirths,SimulationStatistics.noOfDeaths_Natural,SimulationStatistics.noOfDeaths_Ageing,SimulationStatistics.noOfDeaths_Infection,SimulationStatistics.noOfSuckers,SimulationStatistics.noOfCheats,SimulationStatistics.noOfGrudgers,SimulationStatistics.noOfInfectedIndividuals,SimulationStatistics.noOf_SS_Genes,SimulationStatistics.noOf_CC_Genes,SimulationStatistics.noOf_GG_Genes,SimulationStatistics.noOf_SC_Genes,SimulationStatistics.noOf_SG_Genes,SimulationStatistics.noOf_CG_Genes,SimulationStatistics.noOfMales,SimulationStatistics.noOfFemales});
        }

}
